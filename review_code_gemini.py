import os
import json
import base64
import google.generativeai as Gemini
from github import Github

# Set up Gemini API
gemini_api_key = os.environ.get("GEMINI_API_KEY")
Gemini.api_key = gemini_api_key

# Set up GitHub API
github_token = os.environ.get("GITHUB_TOKEN")
gh = Github(github_token)

def review_pull_request(event_path):
    """Reviews a GitHub pull request using Gemini based on GitHub event data.

    Args:
        event_path: Path to the file containing the GitHub event payload.
    """
    with open(event_path, "r") as f:
        event_data = json.load(f)

    # Extract relevant information from the event payload
    repo_full_name = event_data["repository"]["full_name"]
    pr_number = event_data["pull_request"]["number"]

    repo = gh.get_repo(repo_full_name)
    pr = repo.get_pull(pr_number)
    files = pr.get_files()

    review_comments = []
    for file in files:
        # Get the file content (corrected)
        file_content_encoded = file.raw_data["content"]
        file_content = base64.b64decode(file_content_encoded).decode("utf-8")

        # Use Gemini to generate review comments for the file
        response = Gemini.generate_text(
            prompt=f"Please review the following code changes:\n\n```\n{file_content}\n```\n\nProvide your feedback in the form of a list of suggestions, each with a file path, line number, and comment. For example:\n\n* [filename.py:10]: This line could be simplified by using a list comprehension.",
            model="gemini-1.5-pro-002",
        )

        # Parse the suggestions from Gemini's response
        suggestions = parse_suggestions(response.text)
        for suggestion in suggestions:
            review_comments.append(
                {
                    "path": suggestion["path"],
                    "position": suggestion["line"],
                    "body": suggestion["comment"],
                }
            )

    # Submit the review comments to GitHub
    pr.create_review(
        body="Here are some suggestions from Gemini:", comments=review_comments
    )

def parse_suggestions(text):
    """Parses suggestions from Gemini's response.

    Args:
        text: The text generated by Gemini.

    Returns:
        A list of suggestions, each with a path, line, and comment.
    """
    suggestions = []
    lines = text.splitlines()
    for line in lines:
        if line.startswith("* ["):
            try:
                path, line_comment = line[2:].split("]: ")
                path, line_str = path.split(":")
                line_number = int(line_str)
                suggestions.append(
                    {
                        "path": path,
                        "line": line_number,
                        "comment": line_comment,
                    }
                )
            except ValueError:
                print(f"Failed to parse suggestion: {line}")
    return suggestions

if __name__ == "__main__":
    event_path = os.environ["GITHUB_EVENT_PATH"]
    review_pull_request(event_path)